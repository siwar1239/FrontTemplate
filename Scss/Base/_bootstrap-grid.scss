/* ------------------------------------
The complete Bootstrap grid system
[!] Don't change declaration order; Only change pixel values or grid columns if desired
=======================================
Did you know?

You can use mixins provided by Bootstrap to create custom columns (and other grid elements);
Formula is: $grid-columns รท <number> = <variable>

Example for 5 columns (12 รท 5 = 2.4) and breakpoint 'sm':
@include make-sm-column(2.4);
------------------------------------ */

$screen-xs:  375px;
$screen-sm:  768px;
$screen-md:  990px;
$screen-lg: 1300px;

$screen-xs-min: $screen-xs;
$screen-sm-min: $screen-sm;
$screen-md-min: $screen-md;
$screen-lg-min: $screen-lg;

$screen-xs-max: ($screen-sm-min - 1);
$screen-sm-max: ($screen-md-min - 1);
$screen-md-max: ($screen-lg-min - 1);

*,
*:after,
*:before {
    box-sizing: border-box;
}

$grid-columns:              17;
$grid-gutter-width:         0px; // 30px
$grid-float-breakpoint:     $screen-sm-min;
$grid-float-breakpoint-max: ($grid-float-breakpoint - 1);

$container-tablet:        (720px + $grid-gutter-width);
$container-sm:            $container-tablet;
$container-desktop:       (940px + $grid-gutter-width);
$container-md:            $container-desktop;
$container-large-desktop: (1300px + $grid-gutter-width);
$container-lg:            $container-large-desktop;

/* ------------------------------------
[!] Don't change anything beyond this point at all
------------------------------------ */

@mixin box-sizing($boxmodel) {
    box-sizing: $boxmodel;
}

@mixin clearfix() {

    &:after,
    &:before {
        content: "";
        display: table;
    }

    &:after {
        clear: both;
    }
}

@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {

    @for $i from (1 + 1) through $grid-columns {
        $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
    }

    #{$list} {
        min-height: 1px;
        padding-left: ceil(($grid-gutter-width / 2));
        padding-right: floor(($grid-gutter-width / 2));
        position: relative;
    }
}

@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {

    @for $i from (1 + 1) through $grid-columns {
        $list: "#{$list}, .col-#{$class}-#{$i}";
    }

    #{$list} {
        float: left;
    }
}

@mixin calc-grid-column($index, $class, $type) {

    @if ($type == width) and ($index > 0) {
        .col-#{$class}-#{$index} {
            width: percentage(($index / $grid-columns));
        }
    }

    @if ($type == push) and ($index > 0) {
        .col-#{$class}-push-#{$index} {
            left: percentage(($index / $grid-columns));
        }
    }

    @if ($type == push) and ($index == 0) {
        .col-#{$class}-push-0 {
            left: auto;
        }
    }

    @if ($type == pull) and ($index > 0) {
        .col-#{$class}-pull-#{$index} {
            right: percentage(($index / $grid-columns));
        }
    }

    @if ($type == pull) and ($index == 0) {
        .col-#{$class}-pull-0 {
            right: auto;
        }
    }

    @if ($type == offset) {
        .col-#{$class}-offset-#{$index} {
            margin-left: percentage(($index / $grid-columns));
        }
    }
}

@mixin loop-grid-columns($columns, $class, $type) {
    @for $i from 0 through $columns {
        @include calc-grid-column($i, $class, $type);
    }
}

@mixin make-grid($class) {
    @include float-grid-columns($class);
    @include loop-grid-columns($grid-columns, $class, width);
    @include loop-grid-columns($grid-columns, $class, pull);
    @include loop-grid-columns($grid-columns, $class, push);
    @include loop-grid-columns($grid-columns, $class, offset);
}

@mixin container-fixed($gutter: $grid-gutter-width) {
    margin-right: auto;
    margin-left: auto;
    padding-left:  floor(($gutter / 2));
    padding-right: ceil(($gutter / 2));
    @include clearfix;
}

@mixin make-row($gutter: $grid-gutter-width) {
    margin-left:  ceil(($gutter / -2));
    margin-right: floor(($gutter / -2));
    @include clearfix;
}

@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
    float: left;
    min-height: 1px;
    padding-left:  ($gutter / 2);
    padding-right: ($gutter / 2);
    position: relative;
    width: percentage(($columns / $grid-columns));
}

@mixin make-xs-column-offset($columns) {
    margin-left: percentage(($columns / $grid-columns));
}

@mixin make-xs-column-push($columns) {
    left: percentage(($columns / $grid-columns));
}

@mixin make-xs-column-pull($columns) {
    right: percentage(($columns / $grid-columns));
}

@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
    min-height: 1px;
    padding-left:  ($gutter / 2);
    padding-right: ($gutter / 2);
    position: relative;

    @media (min-width: $screen-sm-min) {
        float: left;
        width: percentage(($columns / $grid-columns));
    }
}

@mixin make-sm-column-offset($columns) {

    @media (min-width: $screen-sm-min) {
        margin-left: percentage(($columns / $grid-columns));
    }
}

@mixin make-sm-column-push($columns) {

    @media (min-width: $screen-sm-min) {
        left: percentage(($columns / $grid-columns));
    }
}

@mixin make-sm-column-pull($columns) {

    @media (min-width: $screen-sm-min) {
        right: percentage(($columns / $grid-columns));
    }
}

@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
    min-height: 1px;
    padding-left:  ($gutter / 2);
    padding-right: ($gutter / 2);
    position: relative;

    @media (min-width: $screen-md-min) {
        float: left;
        width: percentage(($columns / $grid-columns));
    }
}

@mixin make-md-column-offset($columns) {

    @media (min-width: $screen-md-min) {
        margin-left: percentage(($columns / $grid-columns));
    }
}

@mixin make-md-column-push($columns) {

    @media (min-width: $screen-md-min) {
        left: percentage(($columns / $grid-columns));
    }
}

@mixin make-md-column-pull($columns) {

    @media (min-width: $screen-md-min) {
        right: percentage(($columns / $grid-columns));
    }
}

@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
    min-height: 1px;
    padding-left:  ($gutter / 2);
    padding-right: ($gutter / 2);
    position: relative;

    @media (min-width: $screen-lg-min) {
        float: left;
        width: percentage(($columns / $grid-columns));
    }
}

@mixin make-lg-column-offset($columns) {

    @media (min-width: $screen-lg-min) {
        margin-left: percentage(($columns / $grid-columns));
    }
}

@mixin make-lg-column-push($columns) {

    @media (min-width: $screen-lg-min) {
        left: percentage(($columns / $grid-columns));
    }
}

@mixin make-lg-column-pull($columns) {

    @media (min-width: $screen-lg-min) {
        right: percentage(($columns / $grid-columns));
    }
}

.container {
    @include container-fixed;

    @media (min-width: $screen-sm-min) {
        width: $container-sm;
    }

    @media (min-width: $screen-md-min) {
        width: $container-md;
    }

    @media (min-width: $screen-lg-min) {
        width: $container-lg;
    }
}

.container-fluid {
    @include container-fixed;
}

.row {
    @include make-row;
}

@include make-grid-columns;

@include make-grid(xs);

@media (min-width: $screen-sm-min) {
    @include make-grid(sm);
}

@media (min-width: $screen-md-min) {
    @include make-grid(md);
}

@media (min-width: $screen-lg-min) {
    @include make-grid(lg);
}
